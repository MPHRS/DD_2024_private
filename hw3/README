# Data-Driven Pipeline

This is a data-driven pipeline designed for bioinformatics analysis, including read quality control, genome assembly, genome annotation, and identification of antimicrobial resistance genes. The pipeline utilizes tools like FastQC, SPAdes, Quast, Prokka, and Abricate. The pipeline is written in Snakemake, which makes it highly configurable and scalable.

## Requirements

- **Snakemake**: Workflow management system
- **Conda**: For environment management
- **Python**: For parsing input files (`params.json`, `samples.csv`)

## Pipeline Overview

1. **Input Files**:
   - `params.json`: Contains global and tool-specific parameters.
   - `samples.csv`: Contains sample information, including paired-end read files.

2. **Tools**:
   - **FastQC**: Quality control of raw sequencing reads.
   - **SPAdes**: Genome assembler for short-read data.
   - **Quast**: Quality assessment tool for genome assemblies.
   - **Prokka**: Prokaryotic genome annotation tool.
   - **Abricate**: Identification of antimicrobial resistance genes in genomic data.

## How It Works

### 1. **Load Configuration Files**
The pipeline loads parameters from two files:
- `params.json`: Contains global parameters and tool-specific settings (e.g., memory, threads).
- `samples.csv`: Contains sample information (sample ID, paired-end reads).

### 2. **Define Rules**

- **`all`**: Defines the final output files that should be generated by the pipeline.
- **`fastqc`**: Runs FastQC on the paired-end reads for each sample.
- **`spades`**: Runs SPAdes to assemble the genome from the paired-end reads.
- **`quast`**: Runs Quast to evaluate the quality of the SPAdes assembly.
- **`prokka`**: Annotates the genome assembly using Prokka.
- **`abricate`**: Identifies antimicrobial resistance genes using Abricate.

### 3. **Input and Output**
For each tool, the input files are configured, and output is directed to the appropriate directory for each sample.

## Installation

1. **Clone the repository**:
   ```bash
   git clone https://github.com/yourusername/yourrepository.git
   cd yourrepository


Parameters
params.json

This file contains global and tool-specific parameters. Example:

{
  "global_params": {
    "threads": 8
  },
  "spades": {
    "threads": 8,
    "memory": "16G"
  },
  "quast": {
    "reference": "reference_genome.fasta"
  },
  "prokka": {
    "genus": "Escherichia",
    "outdir": "prokka_output"
  },
  "abricate": {
    "database": "resistance_db"
  }
}

samples.csv

This file contains information about each sample, including paired-end reads. Example:

sample_id,read_1,read_2
sample1,read1.fastq,read2.fastq
sample2,read3.fastq,read4.fastq

Running the Pipeline

To run the pipeline, execute the following Snakemake command:

snakemake --cores <number_of_cores>

This will automatically run all necessary steps (FastQC, SPAdes, Quast, Prokka, and Abricate) based on the configuration files provided.
Folder Structure

The pipeline assumes the following directory structure:

<project_root>/
│
├── test_input/            # Contains input read files (fastq)
├── test_output/           # Contains output from each step (FastQC, SPAdes, etc.)
│   ├── fastqc/            # FastQC output
│   ├── spades/            # SPAdes assembly results
│   ├── quast/             # Quast reports
│   ├── prokka/            # Prokka annotation output
│   ├── abricate/          # Abricate results
│   └── misc/              # Miscellaneous files
│
├── envs/                  # Conda environment files (yaml)
│
├── params.json            # Global and tool-specific parameters
└── samples.csv            # Sample information (read files)

Example Output

The output for each sample will be placed in the corresponding directories:

    FastQC results will be stored in test_output/fastqc/.
    SPAdes assembly will be stored in test_output/spades/<sample_id>/.
    Quast reports will be found in test_output/quast/<sample_id>/.
    Prokka annotation GFF files will be found in test_output/prokka/.
    Abricate antimicrobial resistance results will be saved in test_output/abricate/.
